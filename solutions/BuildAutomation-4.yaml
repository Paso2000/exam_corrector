core:
- Dependency locking is a mechanism to specify and lock the exact versions of dependencies
  and transitive dependencies in a project.
- It is necessary to ensure reproducibility and consistency of the build environment.
details_additional:
- Tools like Poetry support range specifications and automatic dependency locking.
- Dependency locking helps avoid errors and inconsistencies due to version mismatches.
- It enables reliable and repeatable builds across different environments.
details_important:
- Dependency locking allows specifying a range of supported versions and then locking
  the dependencies to a specific version.
- It creates a lock file that explicitly states the exact version of each dependency.
- Locking also applies to transitive dependencies, creating a snapshot of a working
  environment.
helps:
- '## Check your understanding


  - What is the build life cycle of a software project?

  - In the context of Software Engineering, what is build automation?

  - What can you expect, in general, from a build automation tool?

  - In the context of build automation, what is dependency locking? Why is it necessary?

  - In a Python project, what would you use Poetry for?

  - Where would you release a Python project on Test PyPI? When on PyPI?

  - What is Test PyPI? What''s its purpose?

  - What are the steps to release a Python project via Poetry?

  '
- '## Check your understanding


  - What is the build life cycle of a software project?

  - In the context of Software Engineering, what is build automation?

  - What can you expect, in general, from a build automation tool?

  - In the context of build automation, what is dependency locking? Why is it necessary?

  - In a Python project, what would you use Poetry for?

  - Where would you release a Python project on Test PyPI? When on PyPI?

  - What is Test PyPI? What''s its purpose?

  - What are the steps to release a Python project via Poetry?

  '
- '# Build automation


  Automation of the build lifecycle


  * In principle, the lifecycle could be executed manually

  * In reality *time is precious* and *repetitivy is boring* (and __error-prone__)


  > $\Rightarrow$ Create software that automates the building of some software!


  * All those concerns that hold for software creation hold for build systems creation...

  '
- '# Build automation


  Automation of the build lifecycle


  * In principle, the lifecycle could be executed manually

  * In reality *time is precious* and *repetitivy is boring* (and __error-prone__)


  > $\Rightarrow$ Create software that automates the building of some software!


  * All those concerns that hold for software creation hold for build systems creation...

  '
- "## Dependency ranges and locking\n\n* A project can depend on a specific version\
  \ of a library or on a *range* of versions\n* We want to be able to specify ranges,\
  \ but *retain the ability to use an exact version*\n\n> This software is compatible\
  \ with `library` version 2.3. For our examples, we used version 2.3._10_\n\nExpressing\
  \ something like this is done via **dependency locking**:\n* Configure the build\
  \ file with the range of supported versions\n* Use the build tool to *lock* the\
  \ dependencies (pinpoint their version)\n  * In practice, create a lock file where\
  \ the exact version is explicit\n* Locking usually also locks the **transitive dependencies**!\n\
  \  * Once locked, we have a snapshot of a working environment\n\n[Poetry allows\
  \ range specifications and locks automatically](https://python-poetry.org/docs/dependency-specification/)\n"
id: BuildAutomation-4
model_name: llama-3.3-70b-versatile
model_provider: groq
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformation and Management master programme. \n\nYour task is to create a structured\
  \ checklist for evaluating student answers to each question.\n\nFor each question,\
  \ you should identify:\n\n1. **Core** - The essential elements that MUST be present\
  \ in a perfect answer to address the most important part of the question. These\
  \ are the fundamental concepts, definitions, or explanations that directly answer\
  \ what is being asked.\n\n2. **Important Details** - Significant additional details\
  \ that should be mentioned to enrich the answer. These go beyond the core but are\
  \ important for a complete understanding.\n\n3. **Additional Details** - Optional\
  \ supplementary details that can further improve the answer. These might include\
  \ examples, comparisons, background context, or motivational aspects that add depth\
  \ but are not strictly necessary.\n\nEach item in the lists should be specific,\
  \ verifiable, and actionable - not vague or fluffy.\n\nOnly extract the properties\
  \ mentioned in the '{class_name}' function.\n\nQuestion is:\n    {question}\n\n\
  Below are snippets from the course material that may help you answer the question:\n\
  \n{help}"
question: In the context of build automation, what is dependency locking? Why is it
  necessary?
