core:
- A pipeline is a sequence of operations associated with events
- A pipeline is composed of a sequence of operations
details_additional:
- The hierarchical levels of a pipeline can vary depending on the specific platform,
  such as GitHub Actions or Travis CI
- Examples of pipeline operations include building, testing, and deploying code
- Pipelines can be designed to run automatically in response to specific events or
  triggers
details_important:
- Pipelines can be associated with events such as new commits, updates to pull requests,
  or timeouts
- Every operation in a pipeline could be composed of sequential or parallel sub-operations
- Execution of a pipeline happens in a fresh system, such as a virtual machine or
  container
helps:
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- '{{% section %}}


  ## Check your understanding (pt. 1)


  - In your own words, what is continuous integration?

  - In your own words, what is integration hell?

  - In the context of continuous integration, what is a pipeline?

  - What is GitHub Actions?

  - In the context of continuous integration, provide an overview of the abstract
  pipeline design

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - How would you design a GitHub Actions workflow for a Python project?

  - In the context of GitHub Actions, what is a runner?

  - What is YAML? What is the difference between YAML and JSON?

  - In the context of GitHub Actions, what is a matrix?

  - In the context of GitHub Actions, what is a secret?

  '
- '{{% section %}}


  ## Check your understanding (pt. 1)


  - In your own words, what is continuous integration?

  - In your own words, what is integration hell?

  - In the context of continuous integration, what is a pipeline?

  - What is GitHub Actions?

  - In the context of continuous integration, provide an overview of the abstract
  pipeline design

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - How would you design a GitHub Actions workflow for a Python project?

  - In the context of GitHub Actions, what is a runner?

  - What is YAML? What is the difference between YAML and JSON?

  - In the context of GitHub Actions, what is a matrix?

  - In the context of GitHub Actions, what is a secret?

  '
- "# Core concepts\n\nNaming and organization is variable across different technological,\
  \ but *in general*:\n\n* One or more **pipelines** can be associated to **events**\n\
  \  * For instance, a *new commit*, an update to a *pull request*, or a *timeout*\n\
  * Every pipeline is composed of a **sequence** of **operations**\n* Every **operation**\
  \ could be composed of _sequential_ or _parallel_ **sub-operations**\n* How many\
  \ hierarchical levels are available depends on the specific platform\n  * GitHub\
  \ Actions: *workflow* $\\Rightarrow$ *job* $\\Rightarrow$ *step*\n  * Travis CI:\
  \ *build* $\\Rightarrow$ *stage* $\\Rightarrow$ *job*  $\\Rightarrow$ *phase*\n\
  * Execution happens in a **fresh system** (virtual machine or container)\n  * Often\
  \ containers inside virtual machines\n  * The specific point of the hierarchy at\
  \ which the VM/container is spawned depends on the CI platform\n"
id: CI-3
model_name: llama-3.3-70b-versatile
model_provider: groq
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformation and Management master programme. \n\nYour task is to create a structured\
  \ checklist for evaluating student answers to each question.\n\nFor each question,\
  \ you should identify:\n\n1. **Core** - The essential elements that MUST be present\
  \ in a perfect answer to address the most important part of the question. These\
  \ are the fundamental concepts, definitions, or explanations that directly answer\
  \ what is being asked.\n\n2. **Important Details** - Significant additional details\
  \ that should be mentioned to enrich the answer. These go beyond the core but are\
  \ important for a complete understanding.\n\n3. **Additional Details** - Optional\
  \ supplementary details that can further improve the answer. These might include\
  \ examples, comparisons, background context, or motivational aspects that add depth\
  \ but are not strictly necessary.\n\nEach item in the lists should be specific,\
  \ verifiable, and actionable - not vague or fluffy.\n\nOnly extract the properties\
  \ mentioned in the '{class_name}' function.\n\nQuestion is:\n    {question}\n\n\
  Below are snippets from the course material that may help you answer the question:\n\
  \n{help}"
question: In the context of continuous integration, what is a pipeline?
