core:
- The build life cycle is the process of creating tested deployable software artifacts
  from source code
- It includes various phases such as source code manipulation, quality assurance,
  dependency management, compilation, test execution, and delivery
details_additional:
- The build life cycle is not to be confused with the system development life cycle
  (SDLC)
- Extreme programming focuses on delivering working software in short time frames
  and attempts to mitigate the risk of low-quality code
details_important:
- The build life cycle may include additional phases like binary manipulation, test
  quality assurance, API documentation, and packaging
- It can be automated to reduce time and errors
- There are different lifecycle styles, such as custom and standard, each with their
  own advantages and disadvantages
helps:
- '# Build automation


  Automation of the build lifecycle


  * In principle, the lifecycle could be executed manually

  * In reality *time is precious* and *repetitivy is boring* (and __error-prone__)


  > $\Rightarrow$ Create software that automates the building of some software!


  * All those concerns that hold for software creation hold for build systems creation...

  '
- '# Build automation


  Automation of the build lifecycle


  * In principle, the lifecycle could be executed manually

  * In reality *time is precious* and *repetitivy is boring* (and __error-prone__)


  > $\Rightarrow$ Create software that automates the building of some software!


  * All those concerns that hold for software creation hold for build systems creation...

  '
- "# The build \"life cycle\"\n\n(Not to be confused with the system development life\
  \ cycle (SDLC))\n\n> The process of creating *tested deployable software artifacts*\n\
  > <br/>\n> from *source* code\n\nMay include, depending on the system specifics:\n\
  1. *Source code manipulation* and generation\n1. Source code *quality assurance*\n\
  1. __Dependency management__\n1. *Compilation*, linking\n1. *Binary manipulation*\n\
  1. *Test execution*\n1. Test *quality assurance* (e.g., coverage)\n1. API *documentation*\n\
  1. __Packaging__\n1. __Delivery__\n\n<!-- ---\n\n# Lifecycle styles\n\n* **Custom**:\
  \ select some phases that the product needs and perform them.\n    * *Flexible and\
  \ configurable*: tailored on each project's needs\n    * *Hard to adapt and port*\n\
  \n* **Standard**: run a sequence of pre-defined actions/phases.\n    * *Portable\
  \ and easy to understand*: replicated on every product\n    * *Limited configuration\
  \ options* -->\n"
- "# The build \"life cycle\"\n\n(Not to be confused with the system development life\
  \ cycle (SDLC))\n\n> The process of creating *tested deployable software artifacts*\n\
  > <br/>\n> from *source* code\n\nMay include, depending on the system specifics:\n\
  1. *Source code manipulation* and generation\n1. Source code *quality assurance*\n\
  1. __Dependency management__\n1. *Compilation*, linking\n1. *Binary manipulation*\n\
  1. *Test execution*\n1. Test *quality assurance* (e.g., coverage)\n1. API *documentation*\n\
  1. __Packaging__\n1. __Delivery__\n\n<!-- ---\n\n# Lifecycle styles\n\n* **Custom**:\
  \ select some phases that the product needs and perform them.\n    * *Flexible and\
  \ configurable*: tailored on each project's needs\n    * *Hard to adapt and port*\n\
  \n* **Standard**: run a sequence of pre-defined actions/phases.\n    * *Portable\
  \ and easy to understand*: replicated on every product\n    * *Limited configuration\
  \ options* -->\n"
- '## SE Lifecycle Models Overview (pt. 7)


  ![Extreme Programming](./extreme-programming.png)


  Focus on the delivery of _working software_ in _short_ time frames.


  Attempts to mitigate the consequnet risk of _low-quality_ code.

  '
id: BuildAutomation-1
model_name: llama-3.3-70b-versatile
model_provider: groq
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformation and Management master programme. \n\nYour task is to create a structured\
  \ checklist for evaluating student answers to each question.\n\nFor each question,\
  \ you should identify:\n\n1. **Core** - The essential elements that MUST be present\
  \ in a perfect answer to address the most important part of the question. These\
  \ are the fundamental concepts, definitions, or explanations that directly answer\
  \ what is being asked.\n\n2. **Important Details** - Significant additional details\
  \ that should be mentioned to enrich the answer. These go beyond the core but are\
  \ important for a complete understanding.\n\n3. **Additional Details** - Optional\
  \ supplementary details that can further improve the answer. These might include\
  \ examples, comparisons, background context, or motivational aspects that add depth\
  \ but are not strictly necessary.\n\nEach item in the lists should be specific,\
  \ verifiable, and actionable - not vague or fluffy.\n\nOnly extract the properties\
  \ mentioned in the '{class_name}' function.\n\nQuestion is:\n    {question}\n\n\
  Below are snippets from the course material that may help you answer the question:\n\
  \n{help}"
question: What is the build life cycle of a software project?
