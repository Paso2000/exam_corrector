core:
- The pipeline should be triggered on every push to GitHub
- The pipeline should include automated build, testing, and deployment processes
- The pipeline should use Poetry for build automation and release on PyPi
- The pipeline should use `unittest` for automatic tests
details_additional:
- The pipeline can be implemented using GitHub Actions
- The pipeline can include additional steps, such as sending emails and notifications
  upon failures
- The pipeline can be designed to run on a matrix of different platforms and Python
  versions
- The pipeline can use secrets to store sensitive information, such as PyPi credentials
details_important:
- The pipeline should run as frequently as possible, ideally on every commit or push
- The pipeline should be automated to avoid relying on developers to remember to run
  the steps consistently
- The pipeline should include automated triggering of the build, testing, and deployment
  processes
- The pipeline should be able to run on different platforms, such as different OSs
  and Python versions
helps:
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- "## How to make the integration _continuous_?\n\n1. __Repeat__ the integration process\
  \ as _frequently as possible_\n    * ideally, as frequently as _every commit_, in\
  \ practice, as frequently as __every push__ to GitHub\n\n2. This implies running\
  \ _build_, _testing_, and _deployment_ processes __very frequently__ as well\n \
  \   * which is only possible if the entire process is __automated__\n      * which\
  \ is only possible if __automatic tests_ are available, as well as _build automation_\
  \ scripts, and _automatic release/deployment_ scripts\n    * of course, retrospective\
  \ adjustments are _hard to automate_, and should be done _manually_\n\n3. Do not\
  \ rely on the assumption that developers will _always_ __remember__ to run these\
  \ steps consistently before pushing\n    * they will not, and they will forget to\
  \ do it at some point\n    * so we also need to _automate_ the __triggerig__ of\
  \ the _build_, _testing_, and _deployment_ processes\n\n4. Once the entire process\
  \ is automated, there are __further benefits__:\n    * integration _issues_ can\
  \ be _spotted ASAP_\n    * the process can be repeated on _different platforms_\
  \ (e.g. different OSs, and different versions of Python)\n       - which is far\
  \ more than what a developer can do on their own\n    * emails and notifications\
  \ can be sent upon _failures_ of the process\n"
- "## How to make the integration _continuous_?\n\n1. __Repeat__ the integration process\
  \ as _frequently as possible_\n    * ideally, as frequently as _every commit_, in\
  \ practice, as frequently as __every push__ to GitHub\n\n2. This implies running\
  \ _build_, _testing_, and _deployment_ processes __very frequently__ as well\n \
  \   * which is only possible if the entire process is __automated__\n      * which\
  \ is only possible if __automatic tests_ are available, as well as _build automation_\
  \ scripts, and _automatic release/deployment_ scripts\n    * of course, retrospective\
  \ adjustments are _hard to automate_, and should be done _manually_\n\n3. Do not\
  \ rely on the assumption that developers will _always_ __remember__ to run these\
  \ steps consistently before pushing\n    * they will not, and they will forget to\
  \ do it at some point\n    * so we also need to _automate_ the __triggerig__ of\
  \ the _build_, _testing_, and _deployment_ processes\n\n4. Once the entire process\
  \ is automated, there are __further benefits__:\n    * integration _issues_ can\
  \ be _spotted ASAP_\n    * the process can be repeated on _different platforms_\
  \ (e.g. different OSs, and different versions of Python)\n       - which is far\
  \ more than what a developer can do on their own\n    * emails and notifications\
  \ can be sent upon _failures_ of the process\n"
- '{{% section %}}


  ## Check your understanding (pt. 1)


  - In your own words, what is continuous integration?

  - In your own words, what is integration hell?

  - In the context of continuous integration, what is a pipeline?

  - What is GitHub Actions?

  - In the context of continuous integration, provide an overview of the abstract
  pipeline design

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - How would you design a GitHub Actions workflow for a Python project?

  - In the context of GitHub Actions, what is a runner?

  - What is YAML? What is the difference between YAML and JSON?

  - In the context of GitHub Actions, what is a matrix?

  - In the context of GitHub Actions, what is a secret?

  '
id: CI-10
model_name: llama-3.3-70b-versatile
model_provider: groq
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformation and Management master programme. \n\nYour task is to create a structured\
  \ checklist for evaluating student answers to each question.\n\nFor each question,\
  \ you should identify:\n\n1. **Core** - The essential elements that MUST be present\
  \ in a perfect answer to address the most important part of the question. These\
  \ are the fundamental concepts, definitions, or explanations that directly answer\
  \ what is being asked.\n\n2. **Important Details** - Significant additional details\
  \ that should be mentioned to enrich the answer. These go beyond the core but are\
  \ important for a complete understanding.\n\n3. **Additional Details** - Optional\
  \ supplementary details that can further improve the answer. These might include\
  \ examples, comparisons, background context, or motivational aspects that add depth\
  \ but are not strictly necessary.\n\nEach item in the lists should be specific,\
  \ verifiable, and actionable - not vague or fluffy.\n\nOnly extract the properties\
  \ mentioned in the '{class_name}' function.\n\nQuestion is:\n    {question}\n\n\
  Below are snippets from the course material that may help you answer the question:\n\
  \n{help}"
question: In an ordinary Python project using Poetry for build automation and release
  on PyPi and `unittest` for automatic tests, how would you organize a continuous
  integration pipeline? (What operations should be performed in each run of the pipeline?)
