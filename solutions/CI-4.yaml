core:
- Designing a CI system is designing a software construction, verification, and delivery
  pipeline
- The pipeline is composed of a sequence of operations
- Operations include OS configuration, software installation, project checkout, compilation,
  testing, secrets configuration, and delivery
details_additional:
- The pipeline can be associated with events such as new commits or updates to pull
  requests
- Operations can be composed of sequential or parallel sub-operations
- Execution happens in a fresh system, such as a virtual machine or container
details_important:
- The pipeline is organized in a dependency graph
- The graph is modeled with the provided CI tooling
- Configuration can grow complex and is usually stored in a YAML file
helps:
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- '## Check your understanding (pt. 2)


  - In the context of software engineering, what is integration? What is continuous
  integration?

  - In the context of software engineering, what are the issues arising from infrequent
  integration/release events?

  - In the context of software engineering, how to make integration continuous?

  - What is GitHub Actions? What is its purpose? How does it work?

  - In the context of GitHub Actions, what is the difference among workflow, jobs,
  steps

  - In an ordinary Python project using Poetry for build automation and release on
  PyPi and `unittest` for automatic tests, how would you organize a continuous integration
  pipeline? (What operations should be performed in each run of the pipeline?)


  {{% /section %}}

  '
- "## Pipeline design\n\nIn essence, designing a CI system is designing a software\
  \ construction, verification, and delivery *pipeline*\nwith the abstractions provided\
  \ by the selected provider.\n\n1. **Think** of all the operations required starting\
  \ from one or more *blank* VMs\n    * OS configuration\n    * Software installation\n\
  \    * Project checkout\n    * Compilation\n    * Testing\n    * Secrets configuration\n\
  \    * Delivery\n    * ...\n2. **Organize** them in a dependency graph\n3. **Model**\
  \ the graph with the provided CI tooling\n\nConfiguration can grow complex, and\
  \ is usually stored in a YAML file\n<br>\n(but there are exceptions, JetBrains TeamCity\
  \ uses a Kotlin DSL).\n"
- "## Pipeline design\n\nIn essence, designing a CI system is designing a software\
  \ construction, verification, and delivery *pipeline*\nwith the abstractions provided\
  \ by the selected provider.\n\n1. **Think** of all the operations required starting\
  \ from one or more *blank* VMs\n    * OS configuration\n    * Software installation\n\
  \    * Project checkout\n    * Compilation\n    * Testing\n    * Secrets configuration\n\
  \    * Delivery\n    * ...\n2. **Organize** them in a dependency graph\n3. **Model**\
  \ the graph with the provided CI tooling\n\nConfiguration can grow complex, and\
  \ is usually stored in a YAML file\n<br>\n(but there are exceptions, JetBrains TeamCity\
  \ uses a Kotlin DSL).\n"
- "# Core concepts\n\nNaming and organization is variable across different technological,\
  \ but *in general*:\n\n* One or more **pipelines** can be associated to **events**\n\
  \  * For instance, a *new commit*, an update to a *pull request*, or a *timeout*\n\
  * Every pipeline is composed of a **sequence** of **operations**\n* Every **operation**\
  \ could be composed of _sequential_ or _parallel_ **sub-operations**\n* How many\
  \ hierarchical levels are available depends on the specific platform\n  * GitHub\
  \ Actions: *workflow* $\\Rightarrow$ *job* $\\Rightarrow$ *step*\n  * Travis CI:\
  \ *build* $\\Rightarrow$ *stage* $\\Rightarrow$ *job*  $\\Rightarrow$ *phase*\n\
  * Execution happens in a **fresh system** (virtual machine or container)\n  * Often\
  \ containers inside virtual machines\n  * The specific point of the hierarchy at\
  \ which the VM/container is spawned depends on the CI platform\n"
id: CI-4
model_name: llama-3.3-70b-versatile
model_provider: groq
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformation and Management master programme. \n\nYour task is to create a structured\
  \ checklist for evaluating student answers to each question.\n\nFor each question,\
  \ you should identify:\n\n1. **Core** - The essential elements that MUST be present\
  \ in a perfect answer to address the most important part of the question. These\
  \ are the fundamental concepts, definitions, or explanations that directly answer\
  \ what is being asked.\n\n2. **Important Details** - Significant additional details\
  \ that should be mentioned to enrich the answer. These go beyond the core but are\
  \ important for a complete understanding.\n\n3. **Additional Details** - Optional\
  \ supplementary details that can further improve the answer. These might include\
  \ examples, comparisons, background context, or motivational aspects that add depth\
  \ but are not strictly necessary.\n\nEach item in the lists should be specific,\
  \ verifiable, and actionable - not vague or fluffy.\n\nOnly extract the properties\
  \ mentioned in the '{class_name}' function.\n\nQuestion is:\n    {question}\n\n\
  Below are snippets from the course material that may help you answer the question:\n\
  \n{help}"
question: In the context of continuous integration, provide an overview of the abstract
  pipeline design
