examples:
- An example of a workflow could be automating a test suite to run every time a pull
  request is opened.
- A sample YAML configuration for a simple CI/CD pipeline can be included.
helps:
- "## GitHub Actions (GHA): Structure\n\n* **Workflows** are groups of one or many\
  \ *jobs*\n    - triggered by events such as: a developer _pushing_ on the repository,\
  \ a _pull request_ being opened, a _timeout_, a _manual_ trigger, etc.\n    - multiple\
  \ workflows run in parallel, unless specified otherwise by whoever designed the\
  \ workflows\n\n* **Jobs** is a sequential list of logical *steps*\n    * different\
  \ jobs from the same workflow run in _parallel_, unless a _dependency_ among them\
  \ is explicitly declared\n       + in case of a dependency, the _dependent_ job\
  \ will run _only after_ the dependency job is _completed successfully_\n    * steps\
  \ of the same job run in the _exact same order_ as they are defined in the job\n\
  \    * each job runs inside a _fresh_ new __Virtual Machine__ (VM), with a _selectable\
  \ OS_\n        + most common development tools (e.g. Git, Python, Poetry, etc.)\
  \ are pre-installed by default...\n        + but further may be installed if needed\
  \ (e.g. `MySQL`, `PostgreSQL`, etc.)\n    * the VM is _destroyed_ after the job\
  \ is completed\n        + users can see the _logs_ of the job execution\n      \
  \  + any relevant data produced by the job must be explicitly saved _elsewhere_\
  \ (as part of the job), otherwise it will be lost\n    * [IMPORTANT] jobs can be\
  \ configured to run _multiple times_ with different OS/runtimes: this is the __matrix__\
  \ execution strategy\n\n* **Steps** is just executing a _command_ in the _shell_\
  \ of the job's VM\n    + e.g. cloning the repository via `git`\n    + e.g. restoring\
  \ Python dependencies via `poetry`\n    + e.g. running the tests via `unittest`\n\
  \    + e.g. releasing the software via `poetry`\n    + e.g. doing some _automatic\
  \ edit_ to the repository (such as updating the version number), then _committing_\
  \ and _pushing_ the change __automatically__\n"
- '## GitHub Actions (practical example)


  ![](./actual-workflow.svg)


  - Small rectangles represent *steps*

  - Azure boxes represent *jobs*

  - The whole is a *workflow*

  '
- "## GitHub Actions: Configuration\n\n- Workflows are configured in [YAML files](https://yaml.org/)\
  \ located in the _default branch_ of the repository\n  + in the `.github/workflows/`\
  \ folder.\n\n- One configuration file $\\Rightarrow$ one workflow\n\n- For security\
  \ reasons,\nworkflows may need to get manually activated in the *Actions* tab of\
  \ the GitHub web interface.\n  + on a per-repository basis\n"
- "## GitHub Actions: Runners\n\n- Executors of GitHub actions are called *runners*\n\
  \  + virtual machines (commonly hosted by GitHub)\n    * with the GitHub Actions\
  \ runner application installed.\n\n> **Note**: the GitHub Actions application is\
  \ open source and can be installed locally,\n> creating \"*self-hosted runners*\"\
  . Self-hosted and GitHub-hosted runners can work together.\n\n- Upon their creation,\
  \ runners have a default environment\n  + which depends on their *operating system*\n\
  \n- Documentation available at [https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software)\n"
- "## Secrets\n\nSecrets can be stored in GitHub at the repository or organization\
  \ level.\n\nGitHub Actions can access these secrets from the context:\n* Using the\
  \ `secrets.<secret name>` context object\n* Access is allowed only for workflows\
  \ generated by local events\n    * Namely, no secrets for pull requests\n\nSecrets\
  \ can be added from the web interface (for mice lovers), or via the GitHub CLI:\n\
  \n```bash\ngh secret set TEST_PYPI_TOKEN -b \"dhhfuidhfiudhfidnalnflkanjakl\"\n\
  ```\n"
id: GHA-1
model_name: gpt-4o-mini
model_provider: openai
prompt_template: "You are a teacher in the Software Engineering course, for the Digital\
  \ Transformantion and Management master programme.\nYour goal is to evaluate students\
  \ via a questionnaire composed by open questions.\n\nYour task is to create a checklist\
  \ of \"should\" and \"should not\" items for each question.\nIn particular, for\
  \ each question, you should tell what contents should be mentioned in the perfect\
  \ response,\nand, possibly, what would be contents would be common mistakes, and\
  \ should be avoided.\nExamples as well as background/contextual/motivational information\
  \ are welcome even if not explicitly requested.\nIn that case, fill the list with\
  \ positive/negative examples, comparisons, and relevant background/context/motivational\
  \ concepts to be mentioned in the perfect answer.\nEach item in the list should\
  \ be verifiable and not fluffy.\n\nOnly extract the properties mentioned in the\
  \ '{class_name}' function.\n\nQuestion is:\n    {question}\n\nBelow are snippets\
  \ from the course material that may help you answer the question:\n\n{help}"
question: What is GitHub Actions?
see_also:
- Emphasize the growing importance of CI/CD in software development.
- Provide context on how GitHub Actions compares to other CI/CD tools like Jenkins,
  Travis CI, and CircleCI.
- Discuss real-world applications where GitHub Actions streamline development processes
  and improve collaboration among developers.
should:
- Define GitHub Actions as a CI/CD automation service by GitHub that allows developers
  to automate workflows within the software development lifecycle.
- 'Mention the basic structure: workflows, jobs, steps, and runners.'
- Explain how workflows are triggered by certain events (e.g., pushes, pull requests).
- Elaborate on the concept of jobs running in parallel or sequentially based on dependencies.
- Describe the role of Virtual Machines (VMs) in executing jobs and the temporary
  nature of these environments.
- Introduce the configuration aspect by discussing YAML files and their location in
  the repository.
- Highlight the importance of runners, both GitHub-hosted and self-hosted, in executing
  actions.
- Mention security considerations, such as the use of secrets within workflows.
should_not:
- Avoid overly technical jargon without explanation (e.g., do not assume that everyone
  knows what CI/CD means without context).
- Do not leave out the distinction between jobs and steps as it is crucial for understanding.
- Avoid limiting the explanation to just one part of GitHub Actions (e.g., only workflows
  or only steps).
- Do not ignore the significance of the virtual machine environment and how it affects
  execution.
